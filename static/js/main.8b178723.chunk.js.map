{"version":3,"sources":["component/Preloader.jsx","component/SearchForm.jsx","component/Result.jsx","App.js","serviceWorker.js","index.js"],"names":["Preloader","id","className","SearchForm","search","useState","input","setInput","onSubmit","e","preventDefault","onChange","target","value","required","placeholder","Result","props","res","error","document","body","classList","add","weather","main","name","sys","country","Math","floor","temp","description","api","App","state","data","loading","checkWeather","location","setState","url","axios","get","then","catch","err","console","log","setTimeout","s","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","long","longitude","this","href","Component","Boolean","window","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.8b178723.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Preloader() {\r\n\treturn (\r\n\t\t<div id=\"preloader\">\r\n\t\t\t<div className=\"loader06\"></div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { useState } from 'react';\r\n\r\nfunction SearchForm({ search }) {\r\n\tconst [input, setInput] = useState('');\r\n\r\n\treturn (\r\n\t\t<form\r\n\t\t\tid=\"searchform\"\r\n\t\t\tonSubmit={(e) => {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tsearch(input);\r\n\t\t\t\tsetInput('');\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<input\r\n\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\tsetInput(e.target.value);\r\n\t\t\t\t}}\r\n\t\t\t\trequired\r\n\t\t\t\tplaceholder=\"Enter Location\"\r\n\t\t\t\tvalue={input}\r\n\t\t\t/>\r\n\t\t\t<button>Submit</button>\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\nexport default SearchForm;\r\n","import React from 'react';\r\n\r\nfunction Result(props) {\r\n\tlet { res, error } = props;\r\n\r\n\tif (!error && res.id) {\r\n\t\tdocument.body.classList.add(res.weather[0].main);\r\n\t\treturn (\r\n\t\t\t<div id=\"result\">\r\n\t\t\t\t<h2 id=\"place\">\r\n\t\t\t\t\t{res.name}, {res.sys.country}\r\n\t\t\t\t</h2>\r\n\t\t\t\t<div id=\"temp\">\r\n\t\t\t\t\t{Math.floor(res.main.temp)}\r\n\t\t\t\t\t<span>&#8451;</span>\r\n\t\t\t\t</div>\r\n\t\t\t\t<h3 id=\"weather\">{res.weather[0].description}</h3>\r\n\t\t\t</div>\r\n\t\t);\r\n\t} else return <h2 id=\"error\">{error}</h2>;\r\n}\r\n\r\nexport default Result;\r\n","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './App.scss';\nimport Preloader from './component/Preloader';\nimport SearchForm from './component/SearchForm';\nimport Result from './component/Result';\n\nconst api = '&units=metric&appid=a75aacff5cda4cecc1021dc960ead86f';\n\nclass App extends Component {\n\tstate = { data: {}, loading: true, error: '' };\n\n\tcomponentDidMount() {\n\t\tif (navigator.geolocation) {\n\t\t\tnavigator.geolocation.getCurrentPosition((pos) => {\n\t\t\t\tlet lat = pos.coords.latitude;\n\t\t\t\tlet long = pos.coords.longitude;\n\t\t\t\tconsole.log('position:', lat, long);\n\t\t\t\tlet url =\n\t\t\t\t\t`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}` +\n\t\t\t\t\tapi;\n\t\t\t\taxios\n\t\t\t\t\t.get(url)\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tthis.setState({ error: '', data: res.data });\n\t\t\t\t\t\tconsole.log(this.state);\n\t\t\t\t\t})\n\t\t\t\t\t.catch((err) => {\n\t\t\t\t\t\tconsole.log(err);\n\t\t\t\t\t\tthis.setState({ error: \"Can't Access Your Location !\" });\n\t\t\t\t\t});\n\t\t\t});\n\t\t} else this.setState({ error: \"Can't Access Your Location !\" });\n\n\t\tsetTimeout(() => {\n\t\t\tthis.setState(() => {\n\t\t\t\tlet s = !this.state.data.id && {\n\t\t\t\t\terror: \"Can't Access Your Location !\",\n\t\t\t\t};\n\t\t\t\treturn { ...s, loading: false };\n\t\t\t});\n\t\t}, 3000);\n\t}\n\n\tcheckWeather = (location) => {\n\t\tthis.setState({ loading: true, data: {}, error: '' });\n\t\tlet url =\n\t\t\t`https://api.openweathermap.org/data/2.5/weather?q=${location}` + api;\n\n\t\taxios\n\t\t\t.get(url)\n\t\t\t.then((res) => {\n\t\t\t\tthis.setState({ data: res.data });\n\t\t\t})\n\t\t\t.catch((err) => {\n\t\t\t\tconsole.log('Fetch err', err);\n\t\t\t\tthis.setState({ error: 'No Data Found !' });\n\t\t\t});\n\n\t\tsetTimeout(() => {\n\t\t\tthis.setState(() => {\n\t\t\t\tlet s = !this.state.data.id && {\n\t\t\t\t\terror: 'No Data Found !',\n\t\t\t\t};\n\t\t\t\treturn { ...s, loading: false };\n\t\t\t});\n\t\t\tconsole.log(this.state);\n\t\t}, 2500);\n\t};\n\n\trender() {\n\t\tlet { loading, data, error } = this.state;\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<header>\n\t\t\t\t\t<a href=\"#\">\n\t\t\t\t\t\t<h1>Weather App</h1>\n\t\t\t\t\t</a>\n\t\t\t\t\t<SearchForm search={this.checkWeather} />\n\t\t\t\t</header>\n\t\t\t\t<main>\n\t\t\t\t\t{loading ? <Preloader /> : <Result res={data} error={error} />}\n\t\t\t\t</main>\n\t\t\t\t<footer>\n\t\t\t\t\t<h4>\n\t\t\t\t\t\tCreated by Daudu Yusuf({' '}\n\t\t\t\t\t\t<a href=\"http://twitter.com/yusuf_codes\">@Yusuf_codes</a>)\n\t\t\t\t\t</h4>\n\t\t\t\t</footer>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}