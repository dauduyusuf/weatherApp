{"version":3,"sources":["component/Result.js","component/SearchForm.js","component/Preloader.js","App.js","serviceWorker.js","index.js"],"names":["Report","res","String","fromCharCode","id","name","sys","country","main","temp","weather","Result","props","console","log","err","SearchForm","useState","input","setInput","onSubmit","e","preventDefault","search","onChange","target","value","required","placeholder","Preloader","className","api","App","data","setData","loading","state","setState","useEffect","navigator","geolocation","getCurrentPosition","pos","lat","coords","latitude","long","longitude","url","fetch","then","json","setTimeout","location","checkWeather","href","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6PAEMA,G,MAAS,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACHC,OAAOC,aAAa,UAClC,OACC,yBAAKC,GAAG,UACP,wBAAIA,GAAG,SACLH,EAAII,KADN,KACcJ,EAAIK,IAAIC,SAEtB,yBAAKH,GAAG,QACNH,EAAIO,KAAKC,KACV,yCAED,wBAAIL,GAAG,WAAWH,EAAIS,QAAQ,GAAGF,SAmBrBG,MAff,SAAgBC,GAEf,OADAC,QAAQC,IAAIF,GAEX,6BACEA,EAAMG,IACN,wBAAIX,GAAG,SAASQ,EAAMG,KACnBH,EAAMX,IAAIG,GACb,kBAAC,EAAD,CAAQH,IAAKW,EAAMX,MAEnB,wBAAIG,GAAG,SAAP,qBCDWY,MAvBf,SAAoBJ,GAAQ,IAAD,EACAK,mBAAS,IADT,mBACnBC,EADmB,KACZC,EADY,KAG1B,OACC,0BACCf,GAAG,aACHgB,SAAU,SAACC,GACVA,EAAEC,iBACFV,EAAMW,OAAOL,KAGd,2BACCM,SAAU,SAACH,GACVF,EAASE,EAAEI,OAAOC,QAEnBC,UAAQ,EACRC,YAAY,mBAEb,4CClBY,SAASC,IACvB,OACC,yBAAKzB,GAAG,aACP,yBAAK0B,UAAU,cCClB,IAAMC,EAAM,uDAiFGC,MA/Ef,WAAgB,IAAD,EACUf,mBAAS,IADnB,mBACPgB,EADO,KACDC,EADC,OAEYjB,mBAAS,CAClCkB,SAAS,EACTpB,IAAK,KAJQ,mBAEPqB,EAFO,KAEAC,EAFA,KAsDd,OAtBAC,qBAAU,WAzBLC,UAAUC,aACbD,UAAUC,YAAYC,oBAAmB,SAACC,GACzC,IAAIC,EAAMD,EAAIE,OAAOC,SACjBC,EAAOJ,EAAIE,OAAOG,UACtBlC,QAAQC,IAAI,YAAa6B,EAAKG,GAC9B,IAAIE,EACH,8DAAuDL,EAAvD,gBAAkEG,GAClEf,EACDkB,MAAMD,GACJE,MAAK,SAACjD,GAAD,OAASA,EAAIkD,UAClBD,MAAK,SAACjD,GACNiC,EAAQjC,GACRY,QAAQC,IAAIb,SAIhBmD,YAAW,WACNnB,EAAK5B,KACRgC,EAAS,2BAAKD,GAAN,IAAarB,KAAK,KAE1BsB,EAAS,2BAAKD,GAAN,IAAarB,IAAK,2BAE3BsB,EAAS,2BAAKD,GAAN,IAAaD,SAAS,OAC5B,OAID,IAqBF,6BACC,gCACC,2CACA,kBAAC,EAAD,CACCZ,OAAQ,SAACL,IAvBQ,SAACmC,GACrB,IAAIL,EACH,4DAAqDK,GAAatB,EACnEM,EAAS,2BAAKD,GAAN,IAAaD,SAAS,KAE9Bc,MAAMD,GACJE,MAAK,SAACjD,GAAD,OAASA,EAAIkD,UAClBD,MAAK,SAACjD,GACNiC,EAAQjC,GACRY,QAAQC,IAAIb,MAEZiD,MAAK,WACLE,YAAW,WACVf,EAAS,2BAAKD,GAAN,IAAaD,SAAS,OAC5B,QAUDmB,CAAapC,OAKhB,8BACEkB,EAAMD,QAAU,kBAACN,EAAD,MAAgB,kBAAC,EAAD,CAAQ5B,IAAKgC,EAAMlB,IAAKqB,EAAMrB,OAGhE,gCACC,sDACyB,IACxB,uBAAGwC,KAAK,kCAAR,gBAFD,QClEgBC,QACW,cAA7BC,OAAOJ,SAASK,UAEe,UAA7BD,OAAOJ,SAASK,UAEhBD,OAAOJ,SAASK,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBzB,WACrBA,UAAU0B,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.4d12c441.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Report = ({ res }) => {\r\n\tlet degSign = String.fromCharCode('&#8451');\r\n\treturn (\r\n\t\t<div id=\"result\">\r\n\t\t\t<h2 id=\"place\">\r\n\t\t\t\t{res.name}, {res.sys.country}\r\n\t\t\t</h2>\r\n\t\t\t<div id=\"temp\">\r\n\t\t\t\t{res.main.temp}\r\n\t\t\t\t<span>&#8451;</span>\r\n\t\t\t</div>\r\n\t\t\t<h3 id=\"weather\">{res.weather[0].main}</h3>\r\n\t\t</div>\r\n\t);\r\n};\r\nfunction Result(props) {\r\n\tconsole.log(props);\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{props.err ? (\r\n\t\t\t\t<h2 id=\"error\">{props.err}</h2>\r\n\t\t\t) : props.res.id ? (\r\n\t\t\t\t<Report res={props.res} />\r\n\t\t\t) : (\r\n\t\t\t\t<h2 id=\"error\">No Data Found !</h2>\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Result;\r\n","import React, { useState } from 'react';\r\n\r\nfunction SearchForm(props) {\r\n\tconst [input, setInput] = useState('');\r\n\r\n\treturn (\r\n\t\t<form\r\n\t\t\tid=\"searchform\"\r\n\t\t\tonSubmit={(e) => {\r\n\t\t\t\te.preventDefault();\r\n\t\t\t\tprops.search(input);\r\n\t\t\t}}\r\n\t\t>\r\n\t\t\t<input\r\n\t\t\t\tonChange={(e) => {\r\n\t\t\t\t\tsetInput(e.target.value);\r\n\t\t\t\t}}\r\n\t\t\t\trequired\r\n\t\t\t\tplaceholder=\"Enter Location\"\r\n\t\t\t/>\r\n\t\t\t<button>Submit</button>\r\n\t\t</form>\r\n\t);\r\n}\r\n\r\nexport default SearchForm;\r\n","import React from 'react';\r\n\r\nexport default function Preloader() {\r\n\treturn (\r\n\t\t<div id=\"preloader\">\r\n\t\t\t<div className=\"loader06\"></div>\r\n\t\t</div>\r\n\t);\r\n}\r\n","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport Result from './component/Result';\nimport SearchForm from './component/SearchForm';\nimport Preloader from './component/Preloader';\n\nconst api = '&units=metric&appid=a75aacff5cda4cecc1021dc960ead86f';\n\nfunction App() {\n\tconst [data, setData] = useState('');\n\tconst [state, setState] = useState({\n\t\tloading: true,\n\t\terr: '',\n\t});\n\tconst getLocation = () => {\n\t\tif (navigator.geolocation) {\n\t\t\tnavigator.geolocation.getCurrentPosition((pos) => {\n\t\t\t\tlet lat = pos.coords.latitude;\n\t\t\t\tlet long = pos.coords.longitude;\n\t\t\t\tconsole.log('position:', lat, long);\n\t\t\t\tlet url =\n\t\t\t\t\t`https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}` +\n\t\t\t\t\tapi;\n\t\t\t\tfetch(url)\n\t\t\t\t\t.then((res) => res.json())\n\t\t\t\t\t.then((res) => {\n\t\t\t\t\t\tsetData(res);\n\t\t\t\t\t\tconsole.log(res);\n\t\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\tsetTimeout(() => {\n\t\t\tif (data.name) {\n\t\t\t\tsetState({ ...state, err: false });\n\t\t\t} else {\n\t\t\t\tsetState({ ...state, err: \"Can't access location\" });\n\t\t\t}\n\t\t\tsetState({ ...state, loading: false });\n\t\t}, 4000);\n\t};\n\tuseEffect(() => {\n\t\tgetLocation();\n\t}, []);\n\n\tconst checkWeather = (location) => {\n\t\tlet url =\n\t\t\t`https://api.openweathermap.org/data/2.5/weather?q=${location}` + api;\n\t\tsetState({ ...state, loading: true });\n\t\t// setData({});\n\t\tfetch(url)\n\t\t\t.then((res) => res.json())\n\t\t\t.then((res) => {\n\t\t\t\tsetData(res);\n\t\t\t\tconsole.log(res);\n\t\t\t})\n\t\t\t.then(() => {\n\t\t\t\tsetTimeout(() => {\n\t\t\t\t\tsetState({ ...state, loading: false });\n\t\t\t\t}, 3000);\n\t\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<header>\n\t\t\t\t<h1>Weather App</h1>\n\t\t\t\t<SearchForm\n\t\t\t\t\tsearch={(input) => {\n\t\t\t\t\t\tcheckWeather(input);\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</header>\n\n\t\t\t<main>\n\t\t\t\t{state.loading ? <Preloader /> : <Result res={data} err={state.err} />}\n\t\t\t</main>\n\n\t\t\t<footer>\n\t\t\t\t<h4>\n\t\t\t\t\tCreated by Daudu Yusuf({' '}\n\t\t\t\t\t<a href=\"http://twitter.com/yusuf_codes\">@Yusuf_codes</a>)\n\t\t\t\t</h4>\n\t\t\t</footer>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}